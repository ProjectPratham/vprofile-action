/vprofile-action
app_Dockerfile
FROM openjdk:11 AS BUILD_IMAGE
RUN apt update && apt install maven -y
COPY ./ vprofile-project
RUN cd vprofile-project &&  mvn install 
FROM tomcat:9-jre11
LABEL "Project"="Vprofile"
LABEL "Author"="Pratham"
RUN rm -rf /usr/local/tomcat/webapps/*
COPY --from=BUILD_IMAGE vprofile-project/target/vprofile-v2.war /usr/local/tomcat/webapps/ROOT.war
EXPOSE 8080
CMD ["catalina.sh", "run"]

db_Dockerfile
FROM mysql:8.0.33
LABEL "Project"="vprofile-project"
LABEL "Author"="Pratham"
ENV MYSQL_ROOT_PASSWORD=""
ENV MYSQL_DATABASE="accounts"
ADD db_backup.sql /docker-entrypoint-initdb.d/db_backup.sql


helm/templates
app-secret.yml
db-CIP.yml
apiVersion: v1
kind: Service
metadata:
  name: vprodb
spec:
  ports:
  - port: 3306
    targetPort: vprodb-port
    protocol: TCP
  selector:
    app: vprodb
  type: ClusterIP

mc-CIP.yml
apiVersion: v1
kind: Service
metadata:
  name: vprocache01
spec:
  ports:
  - port: 11211
    targetPort: vpromc-port
    protocol: TCP
  selector:
    app: vpromc 
  type: ClusterIP

rmq-CIP-service.yml
apiVersion: v1
kind: Service
metadata:
  name: vpromq01
spec:
  ports:
  - port: 5672
    targetPort: vpromq01-port
    protocol: TCP
  selector:
    app: vpromq01
  type: ClusterIP

vproapp-service.yml
apiVersion: v1
kind: Service
metadata:
  name: my-app
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: vproapp
  type: ClusterIP

vproingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vpro-ingress
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  rules:
  - host: vprofile.prathu.xyz
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-app
            port:
              number: 8080

vprodbdep.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vprodb
  labels:
    app: vprodb
spec:
  selector:
    matchLabels:
      app: vprodb
  replicas: 1
  template:
    metadata:
      labels:
        app: vprodb
    spec:
      containers:
      - name: vprodb
        image: pratham0416/vprofiledb 
        ports:
        - name: vprodb-port
          containerPort: 3306
        env: 
         - name: MYSQL_ROOT_PASSWORD
           valueFrom:
             secretKeyRef:
               name: app-secret
               key: db-pass

vproappdep.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vproapp
  labels: 
    app: vproapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vproapp
  template:
    metadata:
      labels:
        app: vproapp
    spec:
      containers:
      - name: vproapp
        image: {{ .Values.appimage}}:{{ .Values.apptag}}
        ports:
        - name: vproapp-port
          containerPort: 8080
      initContainers:
      - name: init-mydb
        image: busybox
        command: ['sh', '-c', 'until nslookup vprodb.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for mydb; sleep 2; done;']
      - name: init-memcache
        image: busybox
        command: ['sh', '-c', 'until nslookup vprocache01.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for mydb; sleep 2; done;']

rmq-dep.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vpromq01
  labels:
    app: vpromq01
spec:
  selector:
    matchLabels:
      app: vpromq01
  replicas: 1
  template:
    metadata:
      labels:
        app: vpromq01
    spec:
      containers:
      - name: vpromq01
        image: rabbitmq
        ports:
        - name: vpromq01-port
          containerPort: 15672
        env: 
         - name: RABBITMQ_DEFAULT_PASS
           valueFrom:
             secretKeyRef:
               name: app-secret
               key: rmq-pass
         - name: RABBITMQ_DEFAULT_USER
           value: "guest"

mcdep.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vpromc
  labels:
    app: vpromc
spec:
  selector:
    matchLabels:
      app: vpromc
  replicas: 1
  template:
    metadata:
      labels:
        app: vpromc
    spec:
      containers:
      - name: vpromc
        image: memcached
        ports:
        - name: vpromc-port
          containerPort: 11211

.github/workflows/main.yml
name: vprofile actions
on: workflow_dispatch
env:
    AWS_REGION: us-east-1
    ECR_REPOSITORY: vprofileapp
    EKS_CLUSTER: vprofile-eks
jobs:
    Testing:
        runs-on: ubuntu-latest
        steps:
            - name: Code checkout
              uses: actions/checkout@v4
            - name: Maven test
              run: mvn test
            - name: Checkstyle
              run: mvn checkstyle:checkstyle
            - name: java version 11
              uses: actions/setup-java@v4
              with:
                distribution: 'temurin' # See 'Supported distributions' for available options
                java-version: '11'
            - name: set sonarqube
              uses: warchant/setup-sonar-scanner@v7
            # Run sonar-scanner
            - name: SonarQube Scan
              run: sonar-scanner
                -Dsonar.host.url=${{ secrets.SONAR_URL }}
                -Dsonar.login=${{ secrets.SONAR_TOKEN }}
                -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
                -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
                -Dsonar.sources=src/
                -Dsonar.junit.reportsPath=target/surefire-reports/
                -Dsonar.jacoco.reportsPath=target/jacoco.exec
                -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
                -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/
            - name: SonarQube Quality Gate check
              id: sonarqube-quality-gate-check
              uses: sonarsource/sonarqube-quality-gate-action@master
                # Force to fail step after specific time.
              timeout-minutes: 5
              env:
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                SONAR_HOST_URL: ${{ secrets.SONAR_URL }} #OPTIONAL
    BUILD_AND_PUBLISH:
        needs: Testing
        runs-on: ubuntu-latest
        steps:
            - name: code checkout
              uses: actions/checkout@v4
            - name: upload image to ECR
              uses: appleboy/docker-ecr-action@master
              with:
                access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
                secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                registry: ${{ secrets.REGISTRY }}
                repo: ${{ env.ECR_REPOSITORY }}
                region: ${{ env.AWS_REGION }}
                tags: latest,${{ github.run_number }}
                daemon_off: false
                dockerfile: ./Dockerfile
                context: ./
    DeplotToEKS:
      needs: BUILD_AND_PUBLISH
      runs-on: ubuntu-latest
      steps:
        - name: code checkout
          uses: actions/checkout@v4
        - name: configure aws creds
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}
        - name: get kube config file
          run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}
        #- name: print kube config file
          #run: cat ~/.kube/config
        - name: login to ecr
          run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS --docker-password=$(aws ecr get-login-password)
        - name: Deploy Helm
          uses: bitovi/github-actions-deploy-eks-helm@v1.2.12
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}
            cluster-name: ${{ env.EKS_CLUSTER }}
            #config-files: .github/values/dev.yaml
            chart-path: helm/vprofilecharts
            namespace: default
            values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
            name: vprofile-stack



            
            


